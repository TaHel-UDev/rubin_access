const TelegramBot = require('node-telegram-bot-api');
const DirectusAPI = require('./directus');
const config = require('./config');

class AccessBot {
  constructor() {
    this.bot = new TelegramBot(config.telegram.token, { polling: true });
    this.directus = new DirectusAPI();
    this.userSessions = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    this.setupHandlers();
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from.id;
      const username = msg.from.username || msg.from.first_name;

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ –±–∞–∑–µ
        let employee = await this.directus.getEmployeeByTelegramId(telegramId, msg.from.username);
        
        if (!employee) {
          // –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
          await this.bot.sendMessage(chatId, 
            `üëã –ü—Ä–∏–≤–µ—Ç, ${username}!\n\n` +
            `–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n` +
            `‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n` +
            `–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ Telegram ID –≤ —Å–∏—Å—Ç–µ–º—É.\n\n` +
            `–í–∞—à Telegram ID: \`${telegramId}\`\n` +
            `–í–∞—à username: @${username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
          );
        } else {
          // –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
          await this.bot.sendMessage(chatId, 
            `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${employee.fio}!\n\n` +
            `üìã –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${employee.position}\n` +
            `üè¢ –û—Ç–¥–µ–ª: ${employee.department}\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myaccesses –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –¥–æ—Å—Ç—É–ø–æ–≤.\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`
          );
        }
      } catch (error) {
        await this.bot.sendMessage(chatId, 
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
      }
    });


    // –ö–æ–º–∞–Ω–¥–∞ /myaccesses
    this.bot.onText(/\/myaccesses/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from.id;

      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const employee = await this.directus.getEmployeeByTelegramId(telegramId, msg.from.username);
        
        if (!employee) {
          await this.bot.sendMessage(chatId, 
            '‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n' +
            '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ Telegram ID –≤ —Å–∏—Å—Ç–µ–º—É.\n\n' +
            `–í–∞—à Telegram ID: \`${telegramId}\`\n` +
            `–í–∞—à username: @${msg.from.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
          );
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const accesses = this.directus.getEmployeeAccesses(employee);
        
        if (accesses.length === 0) {
          await this.bot.sendMessage(chatId, 
            'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤.\n' +
            '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–≤.'
          );
          return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–∞–º–∏
        let message = `üîë –í–∞—à–∏ –¥–æ—Å—Ç—É–ø—ã (${employee.fio}):\n\n`;
        
        accesses.forEach((access, index) => {
          message += `${index + 1}. **${access.name}**\n`;
          message += `   üìù ${access.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
          if (access.login) {
            message += `   üîê –õ–æ–≥–∏–Ω: \`${access.login}\`\n`;
          }
          if (access.password) {
            message += `   üîë –ü–∞—Ä–æ–ª—å: \`${access.password}\`\n`;
          }
          if (access.link) {
            message += `   üîó –°—Å—ã–ª–∫–∞: ${access.link}\n`;
          }
          
          message += '\n';
        });

        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        
      } catch (error) {
        await this.bot.sendMessage(chatId, 
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /myaccesses:', error);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      
      const helpMessage = 
        'ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n' +
        '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
        '/myaccesses - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–æ—Å—Ç—É–ø—ã\n' +
        '/refresh - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
        'üí° **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n' +
        '1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏—Ç –≤–∞—à Telegram ID –≤ —Å–∏—Å—Ç–µ–º—É\n' +
        '2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø—ã\n' +
        '3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myaccesses –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–æ–≤\n\n' +
        'üìû **–ï—Å–ª–∏ –≤–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ:**\n' +
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –≤–∞—à–∏–º Telegram ID';

      await this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /refresh
    this.bot.onText(/\/refresh/, async (msg) => {
      const chatId = msg.chat.id;
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Directus
        const isConnected = await this.directus.testConnection();
        
        if (isConnected) {
          await this.bot.sendMessage(chatId, '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
        } else {
          await this.bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }
      } catch (error) {
        await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /refresh:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    this.bot.on('message', (msg) => {
      if (msg.text && msg.text.startsWith('/')) {
        const chatId = msg.chat.id;
        this.bot.sendMessage(chatId, 
          '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('polling_error', (error) => {
      console.error('–û—à–∏–±–∫–∞ polling:', error);
    });
  }

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  async start() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Directus
      const isConnected = await this.directus.testConnection();
      
      if (!isConnected) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Directus API');
        process.exit(1);
      }
      
      console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Directus —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
      process.exit(1);
    }
  }
}

module.exports = AccessBot;
