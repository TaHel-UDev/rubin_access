const axios = require('axios');
const config = require('./config');

class DirectusAPI {
  constructor() {
    this.baseURL = config.directus.url;
    this.token = config.directus.token;
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    this.api = axios.create({
      baseURL: this.baseURL,
      headers: {
        'Authorization': `Bearer ${this.token}`,
        'Content-Type': 'application/json',
        'User-Agent': 'RubinAccessBot/1.0',
        'Accept': 'application/json',
        'Origin': 'https://api.rubinloft.ru',
        'Referer': 'https://api.rubinloft.ru'
      },
      timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      withCredentials: false // –û—Ç–∫–ª—é—á–∞–µ–º cookies
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ Telegram ID –∏–ª–∏ username
  async getEmployeeByTelegramId(telegramId, username = null) {
    try {
      console.log(`üîç –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: telegram_id=${telegramId}, username=${username}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ telegram_id
      let response = await this.api.get(`/items/${config.collections.staff}`, {
        params: {
          fields: '*,keys.staff_materials_id.*',
          filter: {
            status: {
              _eq: 'published'
            },
            telegram_id: {
              _eq: telegramId
            }
          }
        }
      });
      
      console.log(`üìä –û—Ç–≤–µ—Ç –æ—Ç Directus (–ø–æ telegram_id):`, response.status);
      console.log(`üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(response.data, null, 2));
      let employee = response.data.data && response.data.data.length > 0 ? response.data.data[0] : null;
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID –∏ –µ—Å—Ç—å username, –∏—â–µ–º –ø–æ username
      if (!employee && username) {
        // –£–±–∏—Ä–∞–µ–º @ –∏–∑ username –µ—Å–ª–∏ –µ—Å—Ç—å
        const cleanUsername = username.startsWith('@') ? username.substring(1) : username;
        
        console.log(`üîç –ò—â–µ–º –ø–æ username: @${cleanUsername}`);
        
        response = await this.api.get(`/items/${config.collections.staff}`, {
          params: {
            fields: '*,keys.*.*',
            filter: {
              status: {
                _eq: 'published'
              },
              telegram_name: {
                _eq: `@${cleanUsername}`
              }
            }
          }
        });
        
        console.log(`üìä –û—Ç–≤–µ—Ç –æ—Ç Directus (–ø–æ username):`, response.status);
        console.log(`üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ (username):`, JSON.stringify(response.data, null, 2));
        employee = response.data.data && response.data.data.length > 0 ? response.data.data[0] : null;
      }
      
      if (employee) {
        console.log(`‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω: ${employee.fio}`);
      } else {
        console.log(`‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      return employee;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error.response?.status, error.response?.statusText);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      
      if (error.response?.status === 401) {
        throw new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Directus. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.');
      } else if (error.response?.status === 403) {
        throw new Error('–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ staff. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞.');
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ Directus API: ${error.response?.status} ${error.response?.statusText}`);
      }
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (keys —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
  getEmployeeAccesses(employee) {
    try {
      console.log('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', employee.fio);
      console.log('üîë –ò—Å—Ö–æ–¥–Ω—ã–µ keys:', employee.keys ? employee.keys.length : '–Ω–µ—Ç');
      console.log('üîë –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ keys:', JSON.stringify(employee.keys, null, 2));
      
      if (!employee || !employee.keys) {
        console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ keys');
        return [];
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ keys –º–∞—Å—Å–∏–≤–æ–º ID –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤
      if (Array.isArray(employee.keys) && employee.keys.length > 0 && typeof employee.keys[0] === 'number') {
        console.log('‚ö†Ô∏è Keys —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ ID, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return [];
      }

      // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
      employee.keys.forEach((key, index) => {
        console.log(`üîë –ö–ª—é—á ${index + 1}:`, {
          id: key.id,
          staff_materials_id: key.staff_materials_id ? {
            id: key.staff_materials_id.id,
            name: key.staff_materials_id.name,
            status: key.staff_materials_id.status
          } : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        });
      });

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø—ã
      const publishedAccesses = employee.keys.filter(key => {
        const hasMaterials = key.staff_materials_id;
        const isPublished = hasMaterials && key.staff_materials_id.status === 'published';
        
        console.log(`üîç –ö–ª—é—á ${key.id}: hasMaterials=${hasMaterials}, isPublished=${isPublished}`);
        
        return hasMaterials && isPublished;
      }).map(key => key.staff_materials_id);
      
      console.log('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø—ã:', publishedAccesses.length);
      
      return publishedAccesses;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ç—É–ø–æ–≤:', error.message);
      return [];
    }
  }


  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Directus
  async testConnection() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Directus...');
      console.log('üåê URL:', this.baseURL);
      console.log('üîë –¢–æ–∫–µ–Ω:', this.token ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
      try {
        const ipResponse = await axios.get('https://api.ipify.org?format=json');
        console.log('üåç IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:', ipResponse.data.ip);
      } catch (ipError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å');
      }
      
      const response = await this.api.get('/server/ping');
      console.log('‚úÖ Directus ping —É—Å–ø–µ—à–µ–Ω:', response.status);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      try {
        const collectionsResponse = await this.api.get('/collections');
        console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º:', collectionsResponse.status);
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', collectionsResponse.data.data?.map(c => c.collection).join(', '));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏ staff
        try {
          const staffResponse = await this.api.get('/items/staff', {
            params: {
              limit: 1,
              fields: '*,keys.staff_materials_id.*'
            }
          });
          console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ staff (–ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å):', JSON.stringify(staffResponse.data.data?.[0], null, 2));
        } catch (staffError) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ staff:', staffError.response?.status);
        }
      } catch (collectionsError) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º:', collectionsError.response?.status);
      }
      
      return response.status === 200;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Directus:', error.response?.status, error.response?.statusText);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      console.error('‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error.response?.headers);
      return false;
    }
  }
}

module.exports = DirectusAPI;
