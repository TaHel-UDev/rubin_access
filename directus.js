const axios = require('axios');
const config = require('./config');

class DirectusAPI {
  constructor() {
    this.baseURL = config.directus.url;
    this.token = config.directus.token;
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    this.api = axios.create({
      baseURL: this.baseURL,
      headers: {
        'Authorization': `Bearer ${this.token}`,
        'Content-Type': 'application/json',
        'User-Agent': 'RubinAccessBot/1.0',
        'Accept': 'application/json',
        'Origin': 'https://api.rubinloft.ru',
        'Referer': 'https://api.rubinloft.ru'
      },
      timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      withCredentials: false // –û—Ç–∫–ª—é—á–∞–µ–º cookies
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ Telegram ID –∏–ª–∏ username
  async getEmployeeByTelegramId(telegramId, username = null) {
    try {
      console.log(`üîç –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: telegram_id=${telegramId}, username=${username}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ telegram_id
      let response = await this.api.get(`/items/${config.collections.staff}`, {
        params: {
          fields: '*,keys.*.*',
          filter: {
            status: {
              _eq: 'published'
            },
            telegram_id: {
              _eq: telegramId
            }
          }
        }
      });
      
      console.log(`üìä –û—Ç–≤–µ—Ç –æ—Ç Directus (–ø–æ telegram_id):`, response.status);
      let employee = response.data.data && response.data.data.length > 0 ? response.data.data[0] : null;
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID –∏ –µ—Å—Ç—å username, –∏—â–µ–º –ø–æ username
      if (!employee && username) {
        // –£–±–∏—Ä–∞–µ–º @ –∏–∑ username –µ—Å–ª–∏ –µ—Å—Ç—å
        const cleanUsername = username.startsWith('@') ? username.substring(1) : username;
        
        console.log(`üîç –ò—â–µ–º –ø–æ username: @${cleanUsername}`);
        
        response = await this.api.get(`/items/${config.collections.staff}`, {
          params: {
            fields: '*,keys.*.*',
            filter: {
              status: {
                _eq: 'published'
              },
              telegram_name: {
                _eq: `@${cleanUsername}`
              }
            }
          }
        });
        
        console.log(`üìä –û—Ç–≤–µ—Ç –æ—Ç Directus (–ø–æ username):`, response.status);
        employee = response.data.data && response.data.data.length > 0 ? response.data.data[0] : null;
      }
      
      if (employee) {
        console.log(`‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω: ${employee.fio}`);
      } else {
        console.log(`‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      return employee;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error.response?.status, error.response?.statusText);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      
      if (error.response?.status === 401) {
        throw new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Directus. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.');
      } else if (error.response?.status === 403) {
        throw new Error('–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ staff. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞.');
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ Directus API: ${error.response?.status} ${error.response?.statusText}`);
      }
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (keys —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
  getEmployeeAccesses(employee) {
    try {
      if (!employee || !employee.keys) {
        return [];
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø—ã
      return employee.keys.filter(key => 
        key.staff_materials_id && 
        key.staff_materials_id.status === 'published'
      ).map(key => key.staff_materials_id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ç—É–ø–æ–≤:', error.message);
      return [];
    }
  }


  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Directus
  async testConnection() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Directus...');
      console.log('üåê URL:', this.baseURL);
      console.log('üîë –¢–æ–∫–µ–Ω:', this.token ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
      try {
        const ipResponse = await axios.get('https://api.ipify.org?format=json');
        console.log('üåç IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:', ipResponse.data.ip);
      } catch (ipError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å');
      }
      
      const response = await this.api.get('/server/ping');
      console.log('‚úÖ Directus ping —É—Å–ø–µ—à–µ–Ω:', response.status);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      try {
        const collectionsResponse = await this.api.get('/collections');
        console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º:', collectionsResponse.status);
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', collectionsResponse.data.data?.map(c => c.collection).join(', '));
      } catch (collectionsError) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º:', collectionsError.response?.status);
      }
      
      return response.status === 200;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Directus:', error.response?.status, error.response?.statusText);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      console.error('‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error.response?.headers);
      return false;
    }
  }
}

module.exports = DirectusAPI;
